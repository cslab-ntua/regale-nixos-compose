{ pkgs }:
with pkgs.writers;
{

  add_resources = pkgs.writers.writePython3Bin "add_resources" {
    libraries = [ pkgs.nur.repos.kapack.oar ]; } ''
    from oar.lib.tools import get_date
    from oar.lib.resource_handling import resources_creation
    import sys
    import time
    r = True
    while r:
        try:
            print(get_date())  # date took from db (test connection)
            r = False
        except Exception:
            print("DB is not ready")
            time.sleep(0.25)
    resources_creation("node", int(sys.argv[1]), int(sys.argv[2]))
  '';

  oar_db_postInitCommands = ''
      num_cores=$(( $(lscpu | awk '/^Socket\(s\)/{ print $2 }') * $(lscpu | awk '/^Core\(s\) per socket/{ print $4 }') ))
      echo $num_cores > /etc/num_cores
      
      if [[ -f /etc/nxc/deployment-hosts ]]; then
        num_nodes=$(grep node /etc/nxc/deployment-hosts | wc -l)
      else
        num_nodes=$(jq -r '[.nodes[] | select(contains("node"))]| length' /etc/nxc/deployment.json)
      fi
      echo $num_nodes > /etc/num_nodes
      
      add_resources $num_nodes $num_cores 
      '';
  
  ear_newjob = pkgs.writeShellScript "ear_newjob"
  ''
    uniq $OAR_FILE_NODES > "/tmp/uniq_oar_nodes_$OAR_JOB_ID"
    $EAR_INSTALL_PATH/bin/oar-ejob 50001 newjob "/tmp/uniq_oar_nodes_$OAR_JOB_ID" &> /tmp/ear_newjob
    echo $?
  '';

  ear_endjob = pkgs.writeShellScript "ear_endjob"
  ''
    $EAR_INSTALL_PATH/bin/oar-ejob 50001 endjob "/tmp/uniq_oar_nodes_$OAR_JOB_ID" &> /tmp/ear_endjob
    echo $?
    #rm "/tmp/uniq_oar_nodes_$OAR_JOB_ID"
  '';
  
  ear-mpirun = writeBashBin "ear-mpirun"
  ''
    mpirun --hostfile $OAR_NODEFILE -mca pls_rsh_agent oarsh -mca btl tcp,self \
    -x LD_PRELOAD=$EAR_INSTALL_PATH/lib/libearld.so \
    -x OAR_EAR_LOAD_MPI_VERSION=ompi \
    -x OAR_EAR_LOADER_VERBOSE=4 \
    -x OAR_STEP_NUM_NODES=$(uniq $OAR_NODEFILE | wc -l) \
    -x OAR_JOB_ID=$OAR_JOB_ID \
    -x OAR_STEP_ID=0 \
    $@
  '';
}
